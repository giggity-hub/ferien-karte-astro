---
import bundeslaenderjson from '../bundeslaender.geo.json'
import * as d3 from 'd3'

let width = 800
let height = 900

let projection = d3.geoMercator().fitSize([width, height], bundeslaenderjson)
let geoGenerator = d3.geoPath(projection)

const getId = (x) => x.properties.id.split('-')[1]
---

<div id="map-container" class="bg-gray-800 w-full h-full">
    <div id="popover" class="h-32 w-56 is-hidden flex absolute bg-yellow-700">
        <img id="popover__image" class="w-10" src="/coat-of-arms/BB.svg">
        <div >
            <h3 id="popover__title">Bundesland</h3>
            <p id="popover__holiday-name">holiday start</p>
            <span id="popover__holiday-start">from</span>-<span id="popover__holiday-end">until</span>
        </div>

    </div>
    <svg viewBox=`0 0 ${width} ${height}` class="h-full max-w-full mx-auto">
        {bundeslaenderjson.features.map(x => {
            return <>
                <path class="bundesland-path" data-bundesland={getId(x)} stroke="green" fill="white" d={geoGenerator(x)}></path>
                <path class="bundesland-path__highlight" d={geoGenerator(x)}></path>
            </>
        })}
    </svg>
</div>

<style>
    .bundesland-path__highlight{
        display: none;
    }
    #popover{
        
    }
    #popover.transition-enabled{
        transition-duration: 500ms;
        transition-property: left, top;
    }
    #popover.is-hidden{
        opacity: 0;
        pointer-events: none;
    }

    .bundesland-path{
        /* fill: red; */
        /* fill: red; */
        /* opacity: 0.5; */
        
        /* fill: gray; */
        fill: hsla(200, 100%, 50%, 30%);
        stroke: black;
        transition-property: fill;
        transition-duration: 100ms;
    }

    .bundesland-path.is-active{
        --intensity: 50%;
        fill: hsla(300, 100%, 50%, var(--intensity));
        /* fill: orange; */
    }
    .bundesland-path.is-hover{
        fill: green;
        stroke: white;
        z-index: 100;
    }
</style>

<script>
    import { currentHolidays, daysUntilEndOfCurrentHoliday, mouseOverBundesland } from "../customstore"
    import {clamp} from '../utils'
    const $mapContainer = document.getElementById('map-container')!
    const $popover = document.getElementById('popover')!
    const $popoverImage = document.getElementById('popover__image')!
    const $holidayStart = document.getElementById('popover__holiday-start')!
    const $holidayEnd = document.getElementById('popover__holiday-end')!

    import * as d3 from 'd3'

    // const scale = d3.scaleLinear().range([1,7])

    mouseOverBundesland.listen((nv, ov)=> {
        const $newEl = document.querySelector(`.bundesland-path[data-bundesland="${nv}`)
        const $oldEl = document.querySelector(`.bundesland-path[data-bundesland="${ov}`)
        $newEl?.classList.add('is-hover')
        $oldEl?.classList.remove('is-hover')
    })

    document.querySelectorAll('.bundesland-path').forEach(el => {
        (el as SVGPathElement).addEventListener('mouseover', (e)=>{
            e.stopPropagation()
            const $el = e.target as SVGPathElement
            const bid = $el.getAttribute('data-bundesland')
            mouseOverBundesland.value = bid
        })
    })

    $mapContainer.addEventListener('mouseover', ()=>{
        mouseOverBundesland.value = null
    })



    daysUntilEndOfCurrentHoliday.subscribe((nv, ov, key) =>{
        console.log(key, nv);
        const $el = document.querySelector(`.bundesland-path[data-bundesland="${key}"]`)! as HTMLElement
        const minVal = 50
        const step = 3
        const daysRemaining = Math.min(nv, 14)
        $el.style.setProperty('--intensity', minVal + daysRemaining*step + '%')
        nv ? $el.classList.add('is-active') : $el.classList.remove('is-active')
    })

    function hidePopover(){
        $popover.classList.add('is-hidden')
        $popover.classList.remove('transition-enabled')
    }

    function displayPopover(bid: string, e: MouseEvent){
        // e.preventDefault()
        e.stopPropagation()
        const holiday = currentHolidays.getKey(bid)
        if (holiday){
            $holidayStart.innerText = holiday.start
            $holidayEnd.innerText = holiday.end
        }
        $popoverImage.setAttribute('src', `/coat-of-arms/${bid}.svg`)

        // Positioning the motherfucker
        const popoverRect = $popover.getBoundingClientRect()
        const mapContainerRect = $mapContainer.getBoundingClientRect()
        // scale geht von 0 bis mapContainerRect.width - popoverRect.width
        const minX = 0
        const maxX = mapContainerRect.width - popoverRect.width
        // $popover.style.top = 
        $popover.style.left = clamp(minX, maxX, e.clientX - popoverRect.width/2) + 'px'

        const popoverCanBePlacedAboveCursor = e.clientY > popoverRect.height
        if (popoverCanBePlacedAboveCursor){
            $popover.style.top = e.clientY - popoverRect.height + 'px'
        }else{
            $popover.style.top = e.clientY   + 'px'
        }
        
        if ($popover.classList.contains('is-hidden')){
            $popover.classList.remove('is-hidden')
        }else{
            $popover.classList.add('transition-enabled')
        }
        return
    }

    $mapContainer.addEventListener('click', hidePopover)

    document.querySelectorAll('.bundesland-path').forEach(el => {
        el.addEventListener('click', (e)=> {
            const target = (e.target as HTMLElement)
            const bundesland = target.getAttribute('data-bundesland')!
            displayPopover(bundesland, e)
        })
    })
</script>