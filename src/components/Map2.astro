---
import bundeslaenderjson from '../bundeslaender.geo.json'
import * as d3 from 'd3'

let width = 800
let height = 900

let projection = d3.geoMercator().fitSize([width, height], bundeslaenderjson)
let geoGenerator = d3.geoPath(projection)

const getId = (x) => x.properties.id.split('-')[1]
---
<script>
import {bundeslandData} from '../scriptsschmipts/data'
import {holidaysForBundesLand, app} from '../scriptsschmipts/main'


    interface BundeslandInfo {
    fullname: string;
    bid: string;
    imagePath: string;
    holiday?: {
        start: string;
        end: string;
        holiday_type: string;
    }
}


const $tooltip = document.getElementById('tooltip') as BoundedTooltip;

let $toolTipEnvoker: null | HTMLElement = null;


const $mapPopover = document.querySelector('map-popover') as MapPopover;




function togglePopover(e){
    const bid = e.currentTarget.dataset.bundesland as BundeslandID;
    const bundesland = bundeslandData[bid]

    const holiday = holidaysForBundesLand[bid];
    console.log(holidaysForBundesLand)
    if ($tooltip.isHidden) {
        app.selectedBundesland = bid;
        $mapPopover.render(bundesland, holiday)
        $tooltip.show(e)
        $toolTipEnvoker = e.currentTarget
    }else{
        // The ToolTip is already shown
        if ($toolTipEnvoker && $toolTipEnvoker === e.currentTarget) {
            app.selectedBundesland = null;
            // Hide if the currentTarget has opened the tooltip
            $tooltip.hide()
            $toolTipEnvoker = null;
        }else{
            app.selectedBundesland = bid;
            // Move to new position if currenTarget is different
            $mapPopover.render(bundesland, holiday)
            $tooltip.show(e)
            $toolTipEnvoker = e.currentTarget;
        }
    }
    // Ist es ein click auf das selbe oder auf ein anderes?
    // Ist das moped geshown oder nicht?
}


const $paths = document.querySelectorAll('.bundesland-path');
$paths.forEach($el =>{
    $el.addEventListener('click', togglePopover)
})

document.addEventListener('scroll', ()=>{
    $tooltip.hide()
})

document.addEventListener('pointerdown', (e)=>{
    // console.log(e.target)
    const clickOnPath = e.target.matches('.bundesland-path')
    const clickInPopover = e.target === $tooltip || $tooltip.contains(e.target)
    if (!clickOnPath && ! clickInPopover) {
        $tooltip.hide()
    }
})




</script>
<!-- <div id="tooltip-bounds" class="relative"><div> -->

<div id="tooltip-bounds" style="width:100%; height:100%; display:flex;align-items: center; justify-content:center;">
    <bounded-tooltip id="tooltip" bounds="#tooltip-bounds" for="map-popover" class="my-tooltip">
        <map-popover></map-popover>
        <!-- <div id="popover-anchor"></div> -->
    </bounded-tooltip>

    <svg id="holiday-map" viewBox=`0 0 ${width} ${height}` style="max-height: 100%;">
        {bundeslaenderjson.features.map(x => {
            const bid = getId(x)
            return <path
                data-bundesland={bid}
                class="bundesland-path" 
                d={geoGenerator(x)}>
            </path>
        })}
    </svg>
</div>




<style>





    .holiday-map{
        background: blue;
        fill: orange;
    }
    svg{
        pointer-events: all;
    }
    .bundesland-path{
        fill:white;
        stroke: black;
        pointer-events: all;
        --opacity: 0.2;
        opacity: var(--opacity);
        transition: all .1s;
    }
    .bundesland-path.has-current-holiday{
        fill: turquoise;
        --opacity: 0.8
    }
    .bundesland-path.is-hover{
        opacity: calc(var(--opacity) + 0.2)
    }

    .bundesland-path:hover{
        /* fill: purple; */
    }

    .bundesland-path.active{
        /* fill: orange; */
    }
</style>

<style>
    /* .my-tooltip-stuhltip{
        position: absolute;
        background:red;
        width: 100px;
        height: 100px;
    } */
</style>